# Canonical PEG (+Actions) parser
# Adapted from "Parsing Expression Grammars: A Recognition-Based Syntactic Foundation"
#               by Bryan Ford
# ===============================
top:
    | *rules=(definition | spacing)+ ~!. { Grammar(*rules) }

spacing:
    | ((" " | "	")* [ "#" (!\n .)* ] [\n | !.])+
identifier:
    | ( "a"-"z" | "A"-"Z" | "_" ) ( "a"-"z" | "A"-"Z" | "0"-"9" | "_" )*
literal:
    | '"' body=(!'"' .)+ '"' | "'" body=(!"'" .)+ "'" {body}

# definitions
definition:
    | name=identifier spacing ('<-' | '←') spacing ["/" spacing] ~ expr=expr { Rule(name, expr) }

# match clauses
expr:
    | choice

choice:
    | head=transform *tail=(spacing "/" ~ spacing transform)+ { Choice(head, *tail) }
    | transform

transform:
    | expr=sequence spacing action=action { Transform(expr, action) }
    | sequence
action:
    | "{" body=action_body+ ~ "}" { body }
action_body:
    | (!"{" !"}" .)+
    | "{" action_body ~ "}"

sequence:
    | *head=(capture spacing)+ "~" ~ *tail=(spacing capture)+ { Sequence(*head, Entail(*tail)) }
    | head=capture *tail=(spacing capture)+ { Sequence(head, *tail) }
    | "~" ~ *tail=(spacing capture)+ { Entail(*tail) }
    | capture

capture:
    | "*" ~ name=identifier "=" expr=repeat { Capture(expr, name, variadic=True, match=False) }
    | name=identifier "=" ~ expr=repeat { Capture(expr, name, variadic=False, match=False) }
    | repeat

repeat:
    | expr=prefix "+" { Repeat(expr) }
    | expr=prefix "*" { Choice(Repeat(expr), Empty()) }
    | expr=prefix "?" { Choice(expr, Empty()) }
    | prefix

prefix:
    | "!" spacing expr=prefix { Not(expr) }
    | "&" spacing expr=prefix { And(expr) }
    | "(" spacing ~ expr spacing ")"
    | atom

# exclude "identifier <-" to avoid matching a <- b c <- d as a <- (b c)
atom:
    | "''" | '""' { Empty() }
    | "." { Any(1) }
    | class
    | literal=literal { Value(unescape(literal)) }
    | name=identifier !(spacing ('<-' | '←')) { Reference(name) }

class:
    | "[" range "]"
    | "[" ~ *ranges=range+ "]" { Choice(*ranges) }
range:
    | first=char "-" last=char { Range(first, last) }
    | char=char { Value(char) }
char:
    | escaped=( "\'" | '\"' | "\[" | "\]" | "\\" ) { escaped[-1:] }
    | space=( "\n" | "\r" | "\t" ) { unescape(space) }
    | octal=("\" "0"-"2" "0"-"7" "0"-"7" | "\" "0"-"7" ["0"-"7"]) { unescape(octal) }
    | u16=("\u" hexdigit hexdigit hexdigit hexdigit) { unescape(u16) }
    | u32=("\U" hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit hexdigit) { unescape(u32) }
    | !"\" !"[" !"]" .
hexdigit:
    | "0"-"9" | "a"-"f" | "A"-"F"
