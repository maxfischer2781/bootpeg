# Full PEG+Actions parser
spaces:
    | " "* { Discard() }
nothing:
    | "''" | '""' { Nothing() }
anything:
    | "." { Anything() }
end_line:
    | "
" {Discard()}
identifier:
    | ( ( "a" - "z" ) | ( "A" - "Z" ) | "_" )+ { .* }

literal:
    | ('"' ( (!'"') . )+ '"') | ("'" ( (!"'") . )+ "'") { Literal(.*[1:-1]) }
range:
    | first=literal spaces "-" spaces last=literal { Range(.first.value, .last.value) }

optional:
    | "[" spaces expr=expr spaces "]" { either(.expr, Nothing()) }
group:
    | "(" spaces expr=expr spaces ")" { .expr }
choice:
    | try=expr spaces "|" spaces else=expr { either(.try, .else) }
sequence:
    | head=expr spaces tail=expr { chain(.head, .tail) }
repeat:
    | expr=expr spaces "+" { Repeat(.expr) }
    | expr=expr spaces "*" { either(Repeat(.expr), Nothing()) }
capture:
    | name=identifier spaces "=" spaces expr=(reference | group) { Capture(.name, .expr) }
reference:
    | name=identifier { Reference(.name) }
reject:
    | "!" spaces expr=expr { Not(.expr) }
expr:
    | expr=(choice | sequence | repeat | capture | reference | group | optional | range | literal | reject | anything | nothing) { .expr }

rule:
    | "|" spaces expr=expr spaces "{" body=(((!"}") .)+) "}" { Rule(.expr, Action(.body)) }

comment:
    | "#" ((!end_line) .)+ end_line { Discard() }
blank:
    | spaces end_line { Discard() }
define:
    | name=identifier ":" spaces end_line rules=rules { (.name, .rules) }
rules:
    | " " spaces try=rule spaces end_line else=rules { either(.try, .else) }
    | " " spaces rule=rule spaces end_line { .rule }
top:
    | ( define | comment | blank )+ { .* }
